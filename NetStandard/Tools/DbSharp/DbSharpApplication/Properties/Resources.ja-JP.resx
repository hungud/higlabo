<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowNull" xml:space="preserve">
    <value>Null許可</value>
  </data>
  <data name="ColumnName" xml:space="preserve">
    <value>列名</value>
  </data>
  <data name="CommandServiceExecuting" xml:space="preserve">
    <value>コマンドサービスが実行中です。実行が完了するまで待機してください。</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>完了</value>
  </data>
  <data name="ConfirmDelete" xml:space="preserve">
    <value>削除します。よろしいですか？</value>
  </data>
  <data name="Connect" xml:space="preserve">
    <value>接続</value>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>接続文字列</value>
  </data>
  <data name="ConnectionStringInvalid" xml:space="preserve">
    <value>データベースに接続できません。接続文字列を確認してください。</value>
  </data>
  <data name="DbType" xml:space="preserve">
    <value>型</value>
  </data>
  <data name="EnumName" xml:space="preserve">
    <value>Enum名</value>
  </data>
  <data name="EnumValues" xml:space="preserve">
    <value>Enumの値</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>ファイルが見つかりません</value>
  </data>
  <data name="GetAll" xml:space="preserve">
    <value>全て取得</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>言語</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>長さ</value>
  </data>
  <data name="Menu_Add" xml:space="preserve">
    <value>追加(_A)</value>
  </data>
  <data name="Menu_AddToIgnoreList" xml:space="preserve">
    <value>無視リストに追加</value>
  </data>
  <data name="Menu_Close" xml:space="preserve">
    <value>閉じる(_C)</value>
  </data>
  <data name="Menu_Connect" xml:space="preserve">
    <value>接続(_C)</value>
  </data>
  <data name="Menu_Delete" xml:space="preserve">
    <value>削除(_D)</value>
  </data>
  <data name="Menu_DeleteObject" xml:space="preserve">
    <value>オブジェクトの削除(_D)</value>
  </data>
  <data name="Menu_Edit" xml:space="preserve">
    <value>編集(_E)</value>
  </data>
  <data name="Menu_Execute" xml:space="preserve">
    <value>実行(_E)</value>
  </data>
  <data name="Menu_File" xml:space="preserve">
    <value>ファイル(_F)</value>
  </data>
  <data name="Menu_GenerateCSharpCode" xml:space="preserve">
    <value>C#ファイルの生成(_G)</value>
  </data>
  <data name="Menu_GenerateSqlScript" xml:space="preserve">
    <value>Sqlスクリプトの生成(_Q)</value>
  </data>
  <data name="Menu_GetAll" xml:space="preserve">
    <value>全て取得(_A)</value>
  </data>
  <data name="Menu_ImportObject" xml:space="preserve">
    <value>インポート(_I)</value>
  </data>
  <data name="Menu_ImportStoredProcedure" xml:space="preserve">
    <value>ストアドプロシージャのインポート(_S)</value>
  </data>
  <data name="Menu_ImportTable" xml:space="preserve">
    <value>テーブルのインポート(_T)</value>
  </data>
  <data name="Menu_ImportUpdatedObjectAndGenerateFiles" xml:space="preserve">
    <value>インポートとファイルの生成の実行</value>
  </data>
  <data name="Menu_ImportUserDefinedTableType" xml:space="preserve">
    <value>ユーザー定義型のインポート(_U)</value>
  </data>
  <data name="Menu_ManageConnection" xml:space="preserve">
    <value>接続先の管理(_C)</value>
  </data>
  <data name="Menu_ManageIgnoreList" xml:space="preserve">
    <value>無視リストの管理</value>
  </data>
  <data name="Menu_New" xml:space="preserve">
    <value>新規(_N)</value>
  </data>
  <data name="Menu_OpenFile" xml:space="preserve">
    <value>開く(_O)</value>
  </data>
  <data name="Menu_Options" xml:space="preserve">
    <value>オプション(_O)</value>
  </data>
  <data name="Menu_Other" xml:space="preserve">
    <value>その他のメニュー</value>
  </data>
  <data name="Menu_Quit" xml:space="preserve">
    <value>終了(_Q)</value>
  </data>
  <data name="Menu_RecentFiles" xml:space="preserve">
    <value>最近使用したファイル(_R)</value>
  </data>
  <data name="Menu_RemoveFromList" xml:space="preserve">
    <value>リストから削除</value>
  </data>
  <data name="Menu_Save" xml:space="preserve">
    <value>保存(_S)</value>
  </data>
  <data name="Menu_SaveAs" xml:space="preserve">
    <value>名前を付けて保存(_A)</value>
  </data>
  <data name="Menu_SelectAll" xml:space="preserve">
    <value>全て選択(_A)</value>
  </data>
  <data name="Menu_StoredProcedure" xml:space="preserve">
    <value>ストアドプロシージャ(_S)</value>
  </data>
  <data name="Menu_Table" xml:space="preserve">
    <value>テーブル(_T)</value>
  </data>
  <data name="Menu_Tools" xml:space="preserve">
    <value>ツール(_T)</value>
  </data>
  <data name="Menu_UserDefinedTableType" xml:space="preserve">
    <value>ユーザー定義型(_U)</value>
  </data>
  <data name="Menu_View" xml:space="preserve">
    <value>ビュー(_V)</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名前</value>
  </data>
  <data name="PleaseSelectConnectionString" xml:space="preserve">
    <value>接続文字列を選択してください</value>
  </data>
  <data name="PleaseSelectItem" xml:space="preserve">
    <value>項目を選択してください</value>
  </data>
  <data name="Precision" xml:space="preserve">
    <value>有効桁数</value>
  </data>
  <data name="PrimaryKey" xml:space="preserve">
    <value>主キー</value>
  </data>
  <data name="ProcessCompleted" xml:space="preserve">
    <value>完了しました</value>
  </data>
  <data name="Scale" xml:space="preserve">
    <value>少数桁数</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>全てのアイテムを選択</value>
  </data>
  <data name="StoredProcedure" xml:space="preserve">
    <value>ストアドプロシージャ</value>
  </data>
  <data name="Table" xml:space="preserve">
    <value>テーブル</value>
  </data>
  <data name="ThereIsNoObjectAlteredAfterLastProcess" xml:space="preserve">
    <value>前回のインポート以降で変更されたオブジェクトはありません</value>
  </data>
  <data name="ThereIsNoObjectDeletedAfterLastProcess" xml:space="preserve">
    <value>前回の処理以降で新たに削除されたオブジェクトはありません</value>
  </data>
  <data name="ThereIsNoObjectToDelete" xml:space="preserve">
    <value>削除すべき不要なオブジェクトはありません</value>
  </data>
  <data name="TimeZone" xml:space="preserve">
    <value>タイムゾーン</value>
  </data>
  <data name="UserDefinedTableType" xml:space="preserve">
    <value>ユーザー定義型</value>
  </data>
  <data name="UseTableFeature" xml:space="preserve">
    <value>テーブル機能を使用</value>
  </data>
  <data name="ValueForTest" xml:space="preserve">
    <value>テスト用の値</value>
  </data>
  <data name="UseTableFeatureUnableText" xml:space="preserve">
    <value>テーブル機能は無効になっています。</value>
  </data>
  <data name="Menu_CopyResultSet" xml:space="preserve">
    <value>結果セットのコピー</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>一時的に外部キーを無効にする</value>
  </data>
  <data name="DisableForeignKey" xml:space="preserve">
    <value>外部キーを無効にする</value>
  </data>
</root>